{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","role","onClick","toggleState","htmlFor","defaultProps","TextForm","useState","text","setText","heading","rows","onChange","event","target","value","style","backgroundColor","color","toUpperCase","showAlert","toLowerCase","myText","document","getElementById","select","navigator","clipboard","writeText","split","length","Math","ceil","Alert","word","alert","class","slice","message","App","setMode","setAlert","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9e733269.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Link} from \"react-router-dom\";\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/about\">\r\n                About\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          <div className=\"form-check form-switch\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleState}\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n              {(props.mode === 'light') ? 'Enable Dark Mode' : 'Enable Light Mode'}\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  // title: PropTypes.string.isRequired\r\n  title: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set Title here\",\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleTextChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleToUpper = (event) => {\r\n    setText(text.toUpperCase());\r\n    props.showAlert(\"success\", \"Text has been converted to uppercase\");\r\n  };\r\n\r\n  const handleToLower = (event) => {\r\n    setText(text.toLowerCase());\r\n    props.showAlert(\"success\", \"Text has been converted to lowercase\");\r\n  };\r\n\r\n  const handleClearText = (event) => {\r\n    setText(\"\");\r\n    props.showAlert(\"success\", \"Text cleared\");\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    var myText = document.getElementById(\"myBox\");\r\n    myText.select();\r\n    navigator.clipboard.writeText(myText.value);\r\n    props.showAlert(\"success\", \"Text copied to clipboard !\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-3\">\r\n        <h2>{props.heading}</h2>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            rows=\"8\"\r\n            onChange={handleTextChange}\r\n            value={text}\r\n            id=\"myBox\"\r\n            style={{\r\n              backgroundColor: props.mode === \"light\" ? \"white\" : \"#322f3e\",\r\n              color: props.mode === \"light\" ? \"black\" : \"white\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button onClick={handleToUpper} className=\"btn btn-primary mx-3\">\r\n          Convert to Uppercase\r\n        </button>\r\n        <button onClick={handleToLower} className=\"btn btn-primary mx-3\">\r\n          Convert to Lowercase\r\n        </button>\r\n        <button onClick={handleClearText} className=\"btn btn-primary mx-3\">\r\n          Clear Text\r\n        </button>\r\n        <button onClick={handleCopy} className=\"btn btn-primary mx-3\">\r\n          Copy\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\">\r\n        <hr />\r\n        <h3>Text Summary</h3>\r\n        <ul>\r\n          <li>{text.split(\" \").length} words</li>\r\n          <li>{text.length} characters</li>\r\n          <li>\r\n            {Math.ceil(text.split(\" \").length * (1 / 300))} minute read ðŸ§¾\r\n          </li>\r\n        </ul>\r\n        <hr />\r\n        <h3>Preview</h3>\r\n        {text}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nTextForm.propTypes = {\r\n  heading: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default TextForm;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction Alert(props) {\r\n  \r\n  \r\n    const capitalizeFirstLetter = (word) => {\r\n        const myWord = word[0].toUpperCase() + word.slice(1);\r\n        return(\r\n            myWord\r\n        );\r\n    }\r\n\r\n\r\n  return (\r\n    \r\n      props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalizeFirstLetter(props.alert.type)} : </strong>{props.alert.message}\r\n      </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import About from \"./components/About\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const toggleState = () => {\n    if (mode === \"light\") {\n      document.body.style.backgroundColor = \"#101150\";\n      document.body.style.color = \"white\";\n      setMode(\"dark\");\n      showAlert(\"success\", \"Dark mode has been enabled !\");\n    } else {\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n      setMode(\"light\");\n      showAlert(\"success\", \"Light mode has been enabled !\");\n    }\n  };\n\n  const showAlert = (type, message) => {\n    setAlert({\n      type: type,\n      message: message,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  return (\n    <>\n\n\n      {/* <Router> */}\n       \n          <Navbar title=\"TextUtils\" mode={mode} toggleState={toggleState} />\n          <Alert alert={alert} />\n          {/* <Switch> */}\n            {/* <Route exact path=\"/\"> */}\n              <TextForm\n                heading=\"Enter your text below\"\n                mode={mode}\n                showAlert={showAlert}\n              />\n            {/* </Route> */}\n            {/* <Route exact path=\"/about\">\n              <About />\n            </Route>\n          </Switch>\n        \n      </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}